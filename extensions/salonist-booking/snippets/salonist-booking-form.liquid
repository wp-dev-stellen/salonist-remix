<div id="salonist-popup" class="salonist-hidden">
  <div class="salonist-popup-inner">
    <span id="salonist-close">&times;</span>
    <form id="salonist-form">
      <div class="salonist-step" data-step="1">
        <label>Select Size</label>
        <input name="Size" required />
        <div class="salonist-controls">
          <button type="button" class="salonist-next">Next</button>
        </div>
      </div>
      <div class="salonist-step salonist-hidden" data-step="2">
        <label>Choose Color</label>
        <input name="Color" required />
        <div class="salonist-controls">
          <button type="button" class="salonist-prev">Previous</button>
          <button type="button" class="salonist-next">Next</button>
        </div>
      </div>
      <div class="salonist-step salonist-hidden" data-step="3">
        <label>Quantity</label>
        <input name="Quantity" type="number" value="1" min="1" />
        <div class="salonist-controls">
          <button type="button" class="salonist-prev">Previous</button>
          <button type="submit">Add to Cart</button>
        </div>
      </div>
    </form>
  </div>
</div>


<div>
  <button id="prevBtn">←</button>
  <span id="monthLabel"></span>
  <button id="nextBtn">→</button>
</div>
<div id="calendar"></div>

<style>
  #calendar {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 5px;
    max-width: 350px;
    margin-top: 10px;
  }
  .day {
    padding: 10px;
    text-align: center;
    border: 1px solid #ccc;
    cursor: pointer;
  }
  .disabled {
    background: #eee;
    color: #aaa;
    pointer-events: none;
  }
  .header {
    font-weight: bold;
    background: #f2f2f2;
  }
</style>
<script>
  const data = {
    details: {
      Insdetail: {
        max_advance_booking: "60"
      }
    },
    list: [
      { Businesshours: { days: "Sunday", status: "Open" }},
      { Businesshours: { days: "Monday", status: "Close" }},
      { Businesshours: { days: "Tuesday", status: "Open" }},
      { Businesshours: { days: "Wednesday", status: "Open" }},
      { Businesshours: { days: "Thursday", status: "Open" }},
      { Businesshours: { days: "Friday", status: "Open" }},
      { Businesshours: { days: "Saturday", status: "Open" }}
    ]
  };

  const calendarEl = document.getElementById("calendar");
  const monthLabel = document.getElementById("monthLabel");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");

  const closedDays = data.list
    .filter(d => d.Businesshours.status === "Close")
    .map(d => ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      .indexOf(d.Businesshours.days));

  const today = new Date();
  const maxDate = new Date();
  maxDate.setDate(today.getDate() + parseInt(data.details.Insdetail.max_advance_booking));

  let currentYear = today.getFullYear();
  let currentMonth = today.getMonth();

  const renderCalendar = (year, month) => {
    calendarEl.innerHTML = "";
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    monthLabel.textContent = new Date(year, month).toLocaleString("default", { month: "long", year: "numeric" });

    const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    dayNames.forEach(d => {
      const header = document.createElement("div");
      header.className = "day header";
      header.textContent = d;
      calendarEl.appendChild(header);
    });

    // Empty cells before start
    for (let i = 0; i < firstDay; i++) {
      calendarEl.appendChild(document.createElement("div"));
    }

    for (let d = 1; d <= daysInMonth; d++) {
      const date = new Date(year, month, d);
      const cell = document.createElement("div");
      cell.className = "day";
      cell.textContent = d;

      if (date < today || date > maxDate || closedDays.includes(date.getDay())) {
        cell.classList.add("disabled");
      } else {
        cell.addEventListener("click", () => {
          alert("Selected: " + date.toDateString());
        });
      }

      calendarEl.appendChild(cell);
    }

    // Disable prev/next if out of range
    const firstOfMonth = new Date(year, month, 1);
    const lastOfMonth = new Date(year, month + 1, 0);

    prevBtn.disabled = firstOfMonth <= today;
    nextBtn.disabled = lastOfMonth >= maxDate;
  };

  prevBtn.addEventListener("click", () => {
    if (currentMonth === 0) {
      currentYear--;
      currentMonth = 11;
    } else {
      currentMonth--;
    }
    renderCalendar(currentYear, currentMonth);
  });

  nextBtn.addEventListener("click", () => {
    if (currentMonth === 11) {
      currentYear++;
      currentMonth = 0;
    } else {
      currentMonth++;
    }
    renderCalendar(currentYear, currentMonth);
  });

  // Initial render
  renderCalendar(currentYear, currentMonth);
</script>
